<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd
   http://www.springframework.org/schema/mvc
   http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- Annotation-based -->
	<!-- The mvc:resources tag prevents local url to resources(css, js) from 
		being sent to controller to be resolved. -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	
	<!-- <context:component-scan base-package="com.aidu.myschool" /> -->
	<!-- Including the above line will cause a problem which is described below
	together with its solution.
	
	You have two Spring contexts:

	the main one, configured by jpaContext.xml, where beans from the service
	and repository packages are scanned, and proxied by a transactional
	interceptor.

	the mvc one, configured by the other xml file (you didn't name it) whose
	role is to describe the MVC part of the application, i.e. define and
	configure for example the controller beans, the view resolver, etc.
	This context is a child of the main one.

	The problem is that you also scan the service and repository packages in
	this child context. You thus end up with two instances of each service
	and repository:

	one in the main context, which is transactional
	one in the child context, which is not (since the child context doesn't
	care about transaction management)
	The controller is thus injected with a service coming from the same
	context as the controller: the not transactional one.

	To confirm that, you could add traces in the constructor of the beans and
	see how many times they are instantiated.

	And to avoid the problem, there are two solutions:

	avoid scanning the repository and service packages in the mvc context: this
	context should only care about mvc-related beans. When Spring injects a
	service in a controller, it would thus not find the service in the mvc
	context, and thus look it up, and find it in the main context. The
	transactional service would thus be injected.
	use a single context: the one of the servlet, where all the beans in the
	application would be defined. -->

	<mvc:annotation-driven />


	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
</beans>